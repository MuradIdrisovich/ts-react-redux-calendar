{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","store/reducers/event/action-creators.ts","router/index.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","useTypedSelector","useSelector","EventActionEnum","UserService","axios","get","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","localStorage","setItem","e","logout","removeItem","RouteNames","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","console","log","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","filter","ev","author","guest","removeEvent","description","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","error","isLoading","useState","setUsername","setPassword","Form","useForm","form","onFinish","name","className","initialValues","remember","style","color","Item","onChange","target","prefix","UserOutlined","hasFeedback","Password","LockOutlined","htmlType","onClick","setFieldsValue","loading","Login","justify","align","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","formatedDate","toDate","currentDayEvents","map","index","display","justifyContent","alignItems","DeleteOutlined","descr","EventForm","setEvent","submit","size","label","selectDate","guests","Option","Event","modalVisible","setModalVisible","useEffect","removeOneEvent","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","paddingRight","theme","mode","selectable","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54543d4d.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string;\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n}\r\n\r\nexport interface SetAuthAction {\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\nexport interface SetErrorAction {\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\nexport interface SetUserAction {\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser;\r\n}\r\nexport interface SetIsLoadingAction {\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction |\r\n    SetUserAction |\r\n    SetErrorAction |\r\n    SetIsLoadingAction\r\n","import moment, {Moment} from \"moment\";\r\n\r\nexport const rules = {\r\n    required: (message: string = \"Обязательное поле\") => ({\r\n        required: true,\r\n        message\r\n    }),\r\n    isDateAfter: (message: string) => ({              // убрал () =>\r\n        validator(_: any, value: Moment) {            // _ говорит о том что 1й аргумент не обязателен\r\n            // console.log(value);                    // value это выбранная дата\r\n            if (value.isSameOrAfter(moment())) {      // сравниваем дату пришедшую с datePicker с текущей\r\n                return Promise.resolve()\r\n            }\r\n            return Promise.reject(new Error(message));\r\n        }\r\n    })\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\n\r\n\r\nexport interface EventState {\r\n    guests: IUser[];\r\n    events: IEvent[];\r\n}\r\n\r\nexport enum EventActionEnum {\r\n    SET_GUESTS = \"SET_GUESTS\",\r\n    SET_EVENTS = \"SET_EVENTS\"\r\n}\r\n\r\nexport interface SetGuestsAction {\r\n    type: EventActionEnum.SET_GUESTS;\r\n    payload: IUser[]\r\n}\r\n\r\nexport interface SetEventsAction {\r\n    type: EventActionEnum.SET_EVENTS;\r\n    payload: IEvent[]\r\n}\r\n\r\nexport type EventAction =\r\n    SetGuestsAction |\r\n    SetEventsAction\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {IUser} from \"../models/IUser\";\r\n\r\nexport default class UserService {\r\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {  // т.к. функц. асинхронная она всегда возвр. promise\r\n        return axios.get<IUser[]>('./users.json')           // указав что функц. getUsers() - static знач.\r\n    }                                                           // можем вызывать без создания экземпляра класса\r\n}\r\n","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport axios from \"axios\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: auth}),\r\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload}),\r\n    setError: (payload: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true));\r\n            setTimeout(async () => {\r\n                const response = await UserService.getUsers() // получили [{username: string, password: string},{...}...]\r\n                const mockUser = response.data.find(user => user.username === username && user.password === password);\r\n                if (mockUser) {\r\n                    localStorage.setItem('auth', 'true'); // закидываем в localStorage\r\n                    localStorage.setItem('username', mockUser.username); // закидываем username: 'значение' в localStorage\r\n                    dispatch(AuthActionCreators.setUser(mockUser));  // затем {username:...,password:...} идет в initialState.user\r\n                    dispatch(AuthActionCreators.setIsAuth(true))     // initialState = {isAuth:true,user:mockUser,isLoading:true,error:false}\r\n                } else {\r\n                    dispatch(AuthActionCreators.setError('Некорректный логин или пароль'));\r\n                }\r\n                dispatch(AuthActionCreators.setIsLoading(false));\r\n            }, 1000)\r\n        } catch (e) {\r\n            dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        localStorage.removeItem('auth')\r\n        localStorage.removeItem('username')           // очистили localStorage от 'auth' и 'username'\r\n        dispatch(AuthActionCreators.setUser({} as IUser)); // также в initialState  user  очищаем (ставим пуст. объект)\r\n        dispatch(AuthActionCreators.setIsAuth(false))\r\n    }\r\n}\r\n","    import {EventActionEnum, SetEventsAction, SetGuestsAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\nexport const EventActionCreators = {\r\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\r\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\r\n    fetchGuests: () => async (dispatch: AppDispatch) => {  // async (redux-thunk) т.к. UserService.getUsers() это axios\r\n        try {\r\n            const response = await UserService.getUsers()\r\n            dispatch(EventActionCreators.setGuests(response.data));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    createEvent: (event: IEvent) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            json.push(event);\r\n            dispatch(EventActionCreators.setEvents(json));\r\n            localStorage.setItem('events', JSON.stringify(json));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\r\n            // сортируем events и получаем на выходе events у кот. username(имя входящего) равен author или равен guest\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    removeEvent: (description: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            const currentUserEvents = json.filter(ev => ev.description !== description);\r\n            // сортируем events и получаем на выходе events у кот. username(имя входящего) равен author или равен guest\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\r\n            localStorage.setItem('events', JSON.stringify(currentUserEvents));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Event from '../pages/Event';\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    EVENT = '/'\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: RouteNames.EVENT, exact: true, component: Event}\r\n]\r\n","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {EventActionCreators} from \"./event/action-creators\";\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...EventActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\nimport {useMemo} from \"react\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}\r\n\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nconst LoginForm: FC = () => {\r\n    const {error, isLoading} = useTypedSelector(state => state.auth);\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {login} = useActions()\r\n    const [form] = Form.useForm();\r\n\r\n    const submit = () => {\r\n        login(username, password)\r\n    }\r\n    const onFill = () => {\r\n        form.setFieldsValue({\r\n            \"username\": 'user',\r\n            \"password\": '123',\r\n        });\r\n        setUsername('user');\r\n        setPassword('123')\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            onFinish={submit}\r\n            form={form}\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ remember: true }}\r\n        >\r\n            {error && <div style={{color: 'red'}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                name=\"username\"\r\n                rules={[rules.required(\"Пожалуйста введите имя пользователя!\")]}\r\n            >\r\n                <Input\r\n                    value={username}\r\n                    onChange={e => setUsername(e.target.value)}\r\n                    prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name=\"password\"\r\n                rules={[rules.required(\"Пожалуйста введите пароль\")]}\r\n                hasFeedback\r\n            >\r\n                <Input.Password\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    type={\"password\"}\r\n                    prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"default\" htmlType=\"button\" onClick={onFill}>\r\n                    Fill form\r\n                </Button>\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type='primary' htmlType=\"submit\" loading={isLoading}>\r\n                    Log in\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {FC} from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\r\n                <Card>\r\n                    <LoginForm/>\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","export const formatDate = (date: Date): string => {  // тип Date -\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    return `${year}.${month}.${day}`\r\n}\r\n","import React, {FC} from 'react';\r\nimport {Calendar, Button} from \"antd\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\nimport {DeleteOutlined} from \"@ant-design/icons\"\r\nimport Item from \"antd/es/list/Item\";\r\n\r\ninterface EventCalendarProps {\r\n    events: IEvent[];\r\n    removeEvent: (descr: string) => void;\r\n}\r\n\r\nconst EventCalendar: FC<EventCalendarProps> = (props) => {\r\n\r\n    function dateCellRender(value: Moment) {               //value будет принимать ВСЕ отображаемые даты по очереди\r\n        const formatedDate = formatDate(value.toDate());\r\n        // console.log(formatedDate)\r\n        const currentDayEvents = props.events.filter(ev => ev.date === formatedDate);\r\n        // затем если в наших events есть перебираемая дата, (с гостем или автором) то отображается в ячейке (перебираются все отображажемые даты)\r\n        // console.log(currentDayEvents) // это массив с одной датой и разными событиями(гостями,авторами)\r\n        const removeEvent = (descr: string) => {\r\n            props.removeEvent(descr)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {currentDayEvents.map((ev, index) =>\r\n                    <div\r\n                        key={index}\r\n                        onClick={() => console.log('hello')}\r\n                        style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>\r\n                        <div>\r\n                            {ev.description}\r\n                        </div>\r\n                        <DeleteOutlined\r\n                            onClick={() => removeEvent(ev.description)}\r\n                            style={{color: 'red'}}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Calendar\r\n            dateCellRender={dateCellRender}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EventCalendar;\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {IUser} from \"../models/IUser\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\ninterface EventFormProps {\r\n    guests: IUser[],\r\n    submit: (event: IEvent) => void\r\n}\r\n\r\n\r\nconst EventForm: FC<EventFormProps> = (props) => {\r\n\r\n    const [event, setEvent] = useState<IEvent>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: ''\r\n    } as IEvent);\r\n\r\n    const {user} = useTypedSelector(state => state.auth)\r\n\r\n    const selectDate = (date: Moment | null) => {\r\n        if (date) {\r\n            setEvent({...event, date: formatDate(date.toDate())})  // получаем дату в формате moment и приводим её в '20.10.2020'э\r\n        }                                                                // объект типа moment преобразуем к объекту типа Date\r\n    }\r\n\r\n    const submitForm = () => {\r\n        props.submit({...event, author: user.username})  // тут мы локальный(новый) event помещаем в главный\r\n    }         // а также берем из localStorage  events, пушим туда новый и затем новый events кладем в localStorage\r\n\r\n    return (\r\n        <Form onFinish={submitForm} size={'large'}>\r\n            <Form.Item\r\n\r\n                label=\"Описание события\"\r\n                name=\"description\"\r\n                rules={[rules.required()]}\r\n            >\r\n                <Input\r\n                    onChange={e => setEvent({...event, description: e.target.value})}\r\n                    value={event.description}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Дата события\"\r\n                name=\"date\"\r\n                rules={[rules.required(), rules.isDateAfter(\"Нельзя создать событие в прошлом\")]}\r\n            >\r\n                <DatePicker\r\n                    // возвращает объект date типа moment\r\n                    onChange={(date) => selectDate(date)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Выберите гостя\"\r\n                name=\"guest\"\r\n                rules={[rules.required()]}\r\n            >\r\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\r\n                    {/*onChange={параметром принимает выбранного гостя}*/}\r\n                    {props.guests.map(guest =>\r\n                        <Select.Option key={guest.username} value={guest.username}>\r\n                            {guest.username}\r\n                        </Select.Option>\r\n                    )}\r\n                </Select>\r\n            </Form.Item>\r\n            <Row justify=\"end\">\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Создать\r\n                    </Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventForm;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Layout, Modal, Row} from \"antd\";\r\nimport EventCalendar from \"../components/EventCalendar\";\r\nimport EventForm from \"../components/EventForm\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {IEvent} from \"../models/IEvent\";\r\n\r\nconst Event: FC = () => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const {fetchGuests, createEvent, fetchEvents, removeEvent} = useActions();\r\n    const {guests,events} = useTypedSelector(state => state.event);  // useTypedSelector обращается к редюсеру!!!\r\n    const {user} = useTypedSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        fetchGuests()                // 1-я загрузка и мы получаем пользователей из './users.json' и кладем в guests = [{username: string, password: string},{...}...}]\r\n        fetchEvents(user.username);  // берет из localStorage 'events' или [],  events: [ {author:string, guest:string, date:string, description:string}, {...},... ]\r\n    }, [])                      // и кладем в\r\n\r\n    const addNewEvent = (event: IEvent) => {\r\n        setModalVisible(false);\r\n        createEvent(event);\r\n    }\r\n\r\n    const removeOneEvent = (descr: string) => {\r\n        removeEvent(descr)\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            {/*{JSON.stringify(events)}*/}\r\n            {/*<div>{JSON.stringify(user)}</div>*/}\r\n            {/*<div>{JSON.stringify(events)}</div>*/}\r\n            {/*events: [ {author:string, guest:string, date:string, description:string}, {...},... ]*/}\r\n\r\n            <EventCalendar\r\n                events={events}\r\n                removeEvent={(descr) => removeOneEvent(descr)}\r\n            />\r\n\r\n            <Modal\r\n                title=\"Добавить событие\"\r\n                visible={modalVisible}\r\n                footer={null}\r\n                onCancel={() => setModalVisible(false)}\r\n            >\r\n                <EventForm\r\n                    guests={guests}\r\n                    submit={addNewEvent}\r\n                />\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Event;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {privateRoutes, publicRoutes, RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth);\r\n\r\n    return (\r\n        isAuth ?\r\n            <Switch>\r\n                {privateRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.EVENT}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Layout, Menu, Modal, Row} from \"antd\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport EventForm from \"./EventForm\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {Space} from 'antd'\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth);\r\n    const {logout} = useActions()\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const {fetchGuests, createEvent, fetchEvents} = useActions();\r\n    const {guests,events} = useTypedSelector(state => state.event);\r\n\r\n    const addNewEvent = (event: IEvent) => {\r\n        setModalVisible(false);\r\n        createEvent(event);\r\n    }\r\n\r\n    return (\r\n        <Layout.Header >\r\n            <Row justify=\"end\">\r\n                {isAuth\r\n                    ?\r\n                    <>\r\n                        <Modal\r\n                            title=\"Добавить событие\"\r\n                            visible={modalVisible}\r\n                            footer={null}\r\n                            onCancel={() => setModalVisible(false)}\r\n                        >\r\n                            <EventForm\r\n                                guests={guests}\r\n                                submit={addNewEvent}\r\n                            />\r\n                        </Modal>\r\n\r\n                        <div style={{color: 'white', paddingRight: '10px'}}>\r\n                            <Space>\r\n                                <UserOutlined/>\r\n                                {user.username}\r\n                            </Space>\r\n                        </div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                            <Menu.Item\r\n\r\n                                    onClick={() => setModalVisible(true)}\r\n                                    key={3}\r\n                            >\r\n                                Добавить событие\r\n                            </Menu.Item>\r\n                            <Menu.Item\r\n                                onClick={logout}\r\n                                key={2}\r\n                            >\r\n                                Выйти\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                    :\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                        <Menu.Item\r\n                            onClick={() => router.push(RouteNames.LOGIN)}\r\n                            key={1}\r\n                        >\r\n                            Логин\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {FC, useEffect} from 'react';\r\nimport AppRouter from \"./components/AppRouter\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {Layout} from \"antd\";\r\nimport './App.css';\r\nimport {useActions} from \"./hooks/useActions\";\r\nimport {IUser} from \"./models/IUser\";\r\n\r\nconst App:FC = () => {\r\n    const {setUser, setIsAuth} = useActions();\r\n\r\n    useEffect(() => {                            // для отображения при обновлении\r\n        if(localStorage.getItem('auth')) {\r\n            setUser({username: localStorage.getItem('username' || '')} as IUser)\r\n            setIsAuth(true);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <Navbar/>\r\n            <Layout.Content>\r\n                <AppRouter />\r\n            </Layout.Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\n\r\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {EventAction, EventActionEnum, EventState} from \"./types\";\r\n\r\n\r\nconst initialState: EventState = {\r\n    events: [],\r\n    guests: []\r\n}\r\n\r\nexport default function EventReducer(state = initialState, action: EventAction): EventState {\r\n    switch (action.type) {\r\n        case EventActionEnum.SET_GUESTS:\r\n            return {...state, guests: action.payload}\r\n        case EventActionEnum.SET_EVENTS:\r\n            return {...state, events: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import auth from './auth'\r\nimport event from './event';\r\n\r\nexport default {\r\n    auth,\r\n    event\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}